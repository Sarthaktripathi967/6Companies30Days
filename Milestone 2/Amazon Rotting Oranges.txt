class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
    set<pair<int, int>> st;
    queue<pair<int, int>> q;
    for(int i = 0; i < m; i++)
        for(int j = 0; j < n; j++)
            if(grid[i][j] == 2)
                q.push({i, j}), st.insert({i, j});

    q.push({-1, -1});
    int h = 0;
    while(!q.empty())
    {
        pair<int, int> p = q.front();
        q.pop();
        
        if(p.first != -1)
        {
            int a = p.first, b = p.second;
            grid[a][b] = 2;
            if(a > 0 && grid[a - 1][b] == 1 && st.find({a - 1, b}) == st.end())
                q.push({a - 1, b}), st.insert({a - 1, b});
            
            if(a < m - 1 && grid[a + 1][b] == 1 && st.find({a + 1, b}) == st.end())
                q.push({a + 1, b}), st.insert({a + 1, b});
            
            if(b > 0 && grid[a][b - 1] == 1 && st.find({a, b - 1}) == st.end())
                q.push({a, b - 1}), st.insert({a, b - 1});
            
            if(b < n - 1 && grid[a][b + 1] == 1 && st.find({a, b + 1}) == st.end())
                q.push({a, b + 1}), st.insert({a, b + 1}); 
        }
        else if(!q.empty())
            q.push({-1, -1}), h++;                
    }
        
    for(auto &i : grid)
        for(auto &j : i)
            if(j == 1)
                return -1;
    
    return h;
    }
};